// Code generated by gensf. DO NOT EDIT.

package main

import "fmt"

func (value Se) toHtml(prefix string) (out string) {

	// Field : a
	out += fmt.Sprintf(
		"\n<input type=\"text\" name=\"%sa\" value=\"%s\"><br>\n",
		prefix, fmt.Sprintf("%v", value.a))

	// Field : s
	out += fmt.Sprintf(
		"\n<input type=\"text\" name=\"%ss\" value=\"%s\"><br>\n",
		prefix, fmt.Sprintf("%v", value.s))

	return
}

func (value Se) ToHtml() (out string) {
	return value.toHtml("Se.")
}

func (value Se) FormDefault(handlerName string) (out string) {
	out += "<!DOCTYPE html>\n"
	out += "<html>\n"
	out += "<body>\n"
	out += fmt.Sprintf("<form action=\"%s\" target=\"_blank\" method=\"GET\">\n", handlerName)
	out += value.ToHtml()
	out += "<input type=\"submit\" value=\"Submit\">"
	out += "</form>"
	out += "<br>\n"
	out += "</body>\n"
	out += "</html>\n"

	return
}

func (value TestStruct) toHtml(prefix string) (out string) {

	// Field : S

	out += fmt.Sprintf("\n<br><strong>S is slice</strong><br>\n")

	//
	// Exist elements of field: S
	//
	for i := range value.S {
		out += fmt.Sprintf("Data %d<br>\n", i)
		out += fmt.Sprintf(
			"\n<input type=\"text\" name=\"%sS[%d]\" value=\"%s\"><br>\n",
			prefix, i, fmt.Sprintf("%v", value.S))
	}

	//
	// Array script of : S
	//
	out += "<script>\n"
	out += fmt.Sprintf("var initValS = %d;\n", len(value.S))
	out += "\n"
	out += "function insertAfterS(elem, refElem) { \n"
	out += "  var parent = refElem.parentNode; \n"
	out += "  var next = refElem.nextSibling; \n"
	out += "  if (next) { \n"
	out += "    return parent.insertBefore(elem, next); \n"
	out += "  } else { \n"
	out += "    return parent.appendChild(elem); \n"
	out += "  } \n"
	out += "} \n"

	out += "function createElS(context) { \n"
	out += "	// create input\n"
	out += "	var el = document.createElement(\"input\"); \n"
	out += "	el.type = \"text\"; \n"
	out += "	el.name = \"TestStruct.S[\"+initValS+\"]\"; \n"
	out += "	initValS++; \n"
	out += "	insertAfterS(el,context); \n"
	out += "	// create label\n"
	out += "	var label = document.createElement(\"br\");\n"
	out += "	label.id = \"breakLine\" + initValS + \"S\";\n"
	out += "	insertAfterS (label, context);\n"
	out += " } \n"

	out += "function addS() { \n"
	out += "\t var name = 'breakLine' + initValS + 'S'; \n"
	out += "\t createElS(document.getElementById(name)); \n"
	out += "\t console.log(name);\n "
	out += "} \n"
	out += "</script>\n"

	out += "<button type=\"button\" OnClick=\"addS()\">+</button>\n"
	out += fmt.Sprintf("<br id=\"breakLine%dS\">\n", len(value.S))

	// Field : U

	//
	// Exist elements of field: U
	//
	for i := range value.U {
		out += fmt.Sprintf("Data %d<br>\n", i)
		out += fmt.Sprintf(
			"\n<input type=\"text\" name=\"%sU[%d]\" value=\"%s\"><br>\n",
			prefix, i, fmt.Sprintf("%v", value.U))
	}

	//
	// Array script of : U
	//
	out += "<script>\n"
	out += fmt.Sprintf("var initValU = %d;\n", len(value.U))
	out += "\n"
	out += "function insertAfterU(elem, refElem) { \n"
	out += "  var parent = refElem.parentNode; \n"
	out += "  var next = refElem.nextSibling; \n"
	out += "  if (next) { \n"
	out += "    return parent.insertBefore(elem, next); \n"
	out += "  } else { \n"
	out += "    return parent.appendChild(elem); \n"
	out += "  } \n"
	out += "} \n"

	out += "function createElU(context) { \n"
	out += "	// create input\n"
	out += "	var el = document.createElement(\"input\"); \n"
	out += "	el.type = \"text\"; \n"
	out += "	el.name = \"TestStruct.U[\"+initValU+\"]\"; \n"
	out += "	initValU++; \n"
	out += "	insertAfterU(el,context); \n"
	out += "	// create label\n"
	out += "	var label = document.createElement(\"br\");\n"
	out += "	label.id = \"breakLine\" + initValU + \"U\";\n"
	out += "	insertAfterU (label, context);\n"
	out += " } \n"

	out += "function addU() { \n"
	out += "\t var name = 'breakLine' + initValU + 'U'; \n"
	out += "\t createElU(document.getElementById(name)); \n"
	out += "\t console.log(name);\n "
	out += "} \n"
	out += "</script>\n"

	out += "<button type=\"button\" OnClick=\"addU()\">+</button>\n"
	out += fmt.Sprintf("<br id=\"breakLine%dU\">\n", len(value.U))

	// Field : U8

	//
	// Exist elements of field: U8
	//
	for i := range value.U8 {
		out += fmt.Sprintf("Data %d<br>\n", i)
		out += fmt.Sprintf(
			"\n<input type=\"text\" name=\"%sU8[%d]\" value=\"%s\"><br>\n",
			prefix, i, fmt.Sprintf("%v", value.U8))
	}

	//
	// Array script of : U8
	//
	out += "<script>\n"
	out += fmt.Sprintf("var initValU8 = %d;\n", len(value.U8))
	out += "\n"
	out += "function insertAfterU8(elem, refElem) { \n"
	out += "  var parent = refElem.parentNode; \n"
	out += "  var next = refElem.nextSibling; \n"
	out += "  if (next) { \n"
	out += "    return parent.insertBefore(elem, next); \n"
	out += "  } else { \n"
	out += "    return parent.appendChild(elem); \n"
	out += "  } \n"
	out += "} \n"

	out += "function createElU8(context) { \n"
	out += "	// create input\n"
	out += "	var el = document.createElement(\"input\"); \n"
	out += "	el.type = \"text\"; \n"
	out += "	el.name = \"TestStruct.U8[\"+initValU8+\"]\"; \n"
	out += "	initValU8++; \n"
	out += "	insertAfterU8(el,context); \n"
	out += "	// create label\n"
	out += "	var label = document.createElement(\"br\");\n"
	out += "	label.id = \"breakLine\" + initValU8 + \"U8\";\n"
	out += "	insertAfterU8 (label, context);\n"
	out += " } \n"

	out += "function addU8() { \n"
	out += "\t var name = 'breakLine' + initValU8 + 'U8'; \n"
	out += "\t createElU8(document.getElementById(name)); \n"
	out += "\t console.log(name);\n "
	out += "} \n"
	out += "</script>\n"

	out += "<button type=\"button\" OnClick=\"addU8()\">+</button>\n"
	out += fmt.Sprintf("<br id=\"breakLine%dU8\">\n", len(value.U8))

	// Field : sos

	out += fmt.Sprintf("\n<br><strong>Slice of structs</strong><br>\n")

	// Type is not supported of array: *ast.ArrayType. "Se"
	// Field : a
	out += fmt.Sprintf(
		"\n<input type=\"text\" name=\"%sa\" value=\"%s\"><br>\n",
		prefix, fmt.Sprintf("%v", value.a))

	return
}

func (value TestStruct) ToHtml() (out string) {
	return value.toHtml("TestStruct.")
}

func (value TestStruct) FormDefault(handlerName string) (out string) {
	out += "<!DOCTYPE html>\n"
	out += "<html>\n"
	out += "<body>\n"
	out += fmt.Sprintf("<form action=\"%s\" target=\"_blank\" method=\"GET\">\n", handlerName)
	out += value.ToHtml()
	out += "<input type=\"submit\" value=\"Submit\">"
	out += "</form>"
	out += "<br>\n"
	out += "</body>\n"
	out += "</html>\n"

	return
}
