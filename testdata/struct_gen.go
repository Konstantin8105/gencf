// Code generated by gensf. DO NOT EDIT.

package main

import "fmt"

func (value M) toHtml(prefix string) (out string) {

	// Field : a

	out += fmt.Sprintf("\n<br><strong>parameter a</strong><br>\n")
	out += fmt.Sprintf(
		"\n<input type=\"text\" name=\"%sa\" value=\"%s\"><br>\n",
		prefix, fmt.Sprintf("%v", value.a))

	// Field : b

	out += fmt.Sprintf("\n<br><strong>parameter b</strong><br>\n")
	out += fmt.Sprintf(
		"\n<input type=\"text\" name=\"%sb\" value=\"%s\"><br>\n",
		prefix, fmt.Sprintf("%v", value.b))

	// Field : c

	out += fmt.Sprintf("\n<br><strong>parameter c with multiline comments</strong><br>\n")
	out += fmt.Sprintf(
		"\n<input type=\"text\" name=\"%sc\" value=\"%s\"><br>\n",
		prefix, fmt.Sprintf("%v", value.c))

	// Field : d

	out += fmt.Sprintf("\n<br><strong>d is anonymous struct</strong><br>\n")

	// Field : d.e

	out += fmt.Sprintf("\n<br><strong>internal value d.e</strong><br>\n")
	out += fmt.Sprintf(
		"\n<input type=\"text\" name=\"%sd.e\" value=\"%s\"><br>\n",
		prefix, fmt.Sprintf("%v", value.d.e))

	// Field : d.f

	out += fmt.Sprintf("\n<br><strong>internal value d.f</strong><br>\n")
	out += fmt.Sprintf(
		"\n<input type=\"text\" name=\"%sd.f\" value=\"%s\"><br>\n",
		prefix, fmt.Sprintf("%v", value.d.f))

	// Field : h

	out += fmt.Sprintf("\n<br><strong>h with slice</strong><br>\n")

	//
	// Exist elements of field: h
	//
	for i := range value.h {
		out += fmt.Sprintf("Data %d<br>\n", i)
		out += fmt.Sprintf(
			"\n<input type=\"text\" name=\"%sh[%d]\" value=\"%s\"><br>\n",
			prefix, i, fmt.Sprintf("%v", value.h))
	}

	//
	// Array script of : h
	//
	out += "<script>\n"
	out += fmt.Sprintf("var initValh = %d;\n", len(value.h))
	out += "\n"
	out += "function insertAfterh(elem, refElem) { \n"
	out += "  var parent = refElem.parentNode; \n"
	out += "  var next = refElem.nextSibling; \n"
	out += "  if (next) { \n"
	out += "    return parent.insertBefore(elem, next); \n"
	out += "  } else { \n"
	out += "    return parent.appendChild(elem); \n"
	out += "  } \n"
	out += "} \n"

	out += "function createElh(context) { \n"
	out += "	// create input\n"
	out += "	var el = document.createElement(\"input\"); \n"
	out += "	el.type = \"text\"; \n"
	out += "	el.name = \"M.h[\"+initValh+\"]\"; \n"
	out += "	initValh++; \n"
	out += "	insertAfterh(el,context); \n"
	out += "	// create label\n"
	out += "	var label = document.createElement(\"br\");\n"
	out += "	label.id = \"breakLine\" + initValh + \"h\";\n"
	out += "	insertAfterh (label, context);\n"
	out += " } \n"

	out += "function addh() { \n"
	out += "\t var name = 'breakLine' + initValh + 'h'; \n"
	out += "\t createElh(document.getElementById(name)); \n"
	out += "\t console.log(name);\n "
	out += "} \n"
	out += "</script>\n"

	out += "<button type=\"button\" OnClick=\"addh()\">+</button>\n"
	out += fmt.Sprintf("<br id=\"breakLine%dh\">\n", len(value.h))

	return
}

func (value M) ToHtml() (out string) {
	return value.toHtml("M.")
}

func (value M) FormDefault(handlerName string) (out string) {
	out += "<!DOCTYPE html>\n"
	out += "<html>\n"
	out += "<body>\n"
	out += fmt.Sprintf("<form action=\"%s\" target=\"_blank\" method=\"GET\">\n", handlerName)
	out += value.ToHtml()
	out += "<input type=\"submit\" value=\"Submit\">"
	out += "</form>"
	out += "<br>\n"
	out += "</body>\n"
	out += "</html>\n"

	return
}
