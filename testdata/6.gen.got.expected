// Code generated by gensf. DO NOT EDIT.

package main

import "fmt"

func (value TestStruct) toHtml(prefix string) (out string) {

	// Field : S

	out += fmt.Sprintf("\n<br><strong>S is slice</strong><br>\n")

	//
	// Exist elements of field: S
	//
	for i := range value.S {
		out += fmt.Sprintf("Data %d<br>\n", i)
		out += fmt.Sprintf(
			"\n<input type=\"text\" name=\"%sS[%d]\" value=\"%s\"><br>\n",
			prefix, i, fmt.Sprintf("%v", value.S))
	}

	//
	// Array script of : S
	//
	out += "<script>\n"
	out += fmt.Sprintf("var initValS = %d;\n", len(value.S))
	out += "\n"
	out += "function insertAfterS(elem, refElem) { \n"
	out += "  console.log('Insert : ' + elem + ' in ' + refElem);\n"
	out += "  var parent = refElem.parentNode; \n"
	out += "  var next = refElem.nextSibling; \n"
	out += "  if (next) { \n"
	out += "    return parent.insertBefore(elem, next); \n"
	out += "  } else { \n"
	out += "    return parent.appendChild(elem); \n"
	out += "  } \n"
	out += "} \n"

	out += "function createElS(context) { \n"
	out += "	console.log('context : '+ context);\n"
	out += "	// create label\n"
	out += "	var txt = document.createElement(\"p\"); \n"
	out += "    var id  = \"InputTestStruct.\"+initValS+\"S\" ;\n "
	out += "	txt.id   = id;\n"
	out += "	var node = document.createTextNode('Data '+ initValS);\n"
	out += "	txt.appendChild(node);\n"
	out += "	console.log(el);\n"
	out += "	insertAfterS(txt,context); \n"
	out += "	// create input\n"
	out += "	var el = document.createElement(\"input\"); \n"
	out += "	el.type = \"text\"; \n"
	out += "	el.name = \"TestStruct.S[\"+initValS+\"]\"; \n"
	out += "	var last = id;\n"
	out += "	id = \"TextTestStruct.\"+initValS+\"S\" ;\n "
	out += "	el.id   = id;\n"
	out += "	console.log(el);\n"
	out += "	insertAfterS(el, document.getElementById(last)); \n"
	out += "	// incrementation\n"
	out += "	initValS++; \n"
	out += "	console.log(\"initVal = \" + initValS);\n"
	out += "	// create br\n"
	out += "	console.log('create label');\n"
	out += "	var label = document.createElement(\"br\");\n"
	out += "	label.id = 'breakLine' + initValS + 'S';\n"
	out += "	console.log(label);\n"
	out += "	insertAfterS (label, document.getElementById(id));\n"
	out += " } \n"

	out += "function addS() { \n"
	out += "	console.log(\"initVal = \" + initValS);\n"
	out += "	var name = 'breakLine' + initValS + 'S'; \n"
	out += "	console.log('name of parent : ' + name);\n "
	out += "	createElS(document.getElementById(name)); \n"
	out += "	console.log(\"initVal = \" + initValS);\n"
	out += "} \n"
	out += "</script>\n"

	out += "<button type=\"button\" OnClick=\"addS()\">+</button>\n"
	out += fmt.Sprintf("<br id=\"breakLine%dS\">\n", len(value.S))

	// Field : str

	out += fmt.Sprintf("\n<br><strong>Just simple string</strong><br>\n")
	out += fmt.Sprintf(
		"\n<input type=\"text\" name=\"%sstr\" value=\"%s\"><br>\n",
		prefix, fmt.Sprintf("%v", value.str))

	// Field : a

	out += fmt.Sprintf("\n<br><strong>a is var</strong><br>\n")
	out += fmt.Sprintf(
		"\n<input type=\"text\" name=\"%sa\" value=\"%s\"><br>\n",
		prefix, fmt.Sprintf("%v", value.a))

	return
}

func (value TestStruct) ToHtml() (out string) {
	return value.toHtml("TestStruct.")
}

func (value TestStruct) FormDefault(handlerName string) (out string) {
	out += "<!DOCTYPE html>\n"
	out += "<html>\n"
	out += "<body>\n"
	out += fmt.Sprintf("<form action=\"%s\" target=\"_blank\" method=\"GET\">\n", handlerName)
	out += value.ToHtml()
	out += "<input type=\"submit\" value=\"Submit\">"
	out += "</form>"
	out += "<br>\n"
	out += "</body>\n"
	out += "</html>\n"

	return
}
